package leetcode;

import java.math.BigDecimal;

public class PowImpl {
	public double myPow(double x, int n) {

		if (x == 0) {
			return 0;
		}
		if (x == 1 || n == 0) {
			return 1;
		}
		if (n == 1) {
			return x;
		}
		if (n < Integer.MIN_VALUE) {
			return 0;
		}
		if (x == -1) {
			if (n % 2 == 0)
				return 1;
			else
				return -1;
		}
		if (n < 0) {
			x = 1 / x;
			n = -n;
		}
		double result = 1.0;
		while (n > 0) {
			if ((n & 1) != 0) {
				result *= x;
			}
			x = x * x;
			n = n >> 1; // gives half floor function
		}
		return result;
	}

	public double myPow1(double x, int n) {
		if (n == 0)
			return 1;
		if (x == 1)
			return 1;
		if (x == -1) {
			if (n % 2 == 0)
				return 1;
			else
				return -1;
		}

		if (n == Integer.MIN_VALUE)
			return 0;
		if (n < 0) {
			n = -n;
			x = 1 / x;
		}
		double ret = 1.0;
		while (n > 0) {
			if ((n & 1) != 0)
				ret *= x;
			x = x * x;
			n = n >> 1;
		}
		return ret;
	}

	public static void main(String[] args) {
		PowImpl obj = new PowImpl();
		//System.out.println(obj.myPow(2, 10));
		//System.out.println(-2147483648%2);
		char[][] c = {{'a','b'},{'c','d'},{'c','d'}};
		System.out.println(c.length);
		System.out.println(c[0].length);
		System.out.println(obj.myPow1(3,2));
	}
}